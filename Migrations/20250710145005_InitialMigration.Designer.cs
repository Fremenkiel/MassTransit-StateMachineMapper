// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StateMachineMapper.Database;

#nullable disable

namespace StateMachineMapper.Migrations
{
    [DbContext(typeof(DefaultDatabaseContext))]
    [Migration("20250710145005_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StateMachineMapper.Entities.StateMachineTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("StateMachineTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95")
                        });
                });

            modelBuilder.Entity("StateMachineMapper.Entities.StateMachineTemplateConsumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HandlerName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("StateMachineTemplateConsumers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HandlerName = "OnboardingHandler",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95")
                        },
                        new
                        {
                            Id = 2,
                            HandlerName = "SendWelcomeEmailHandler",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95")
                        },
                        new
                        {
                            Id = 3,
                            HandlerName = "SendFollowUpEmailHandler",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95")
                        },
                        new
                        {
                            Id = 4,
                            HandlerName = "OnboardingCompletedHandler",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95")
                        });
                });

            modelBuilder.Entity("StateMachineMapper.Entities.StateMachineTemplateEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionParameter")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ActionType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("InitialStateName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("TriggerEventName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("StateMachineTemplateEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionParameter = "SetSubscriptionInfo",
                            ActionType = "Then",
                            InitialStateName = "Initially",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95"),
                            TriggerEventName = "SubscriberCreated"
                        },
                        new
                        {
                            Id = 2,
                            ActionParameter = "Welcoming",
                            ActionType = "TransitionTo",
                            InitialStateName = "Initially",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95"),
                            TriggerEventName = "SubscriberCreated"
                        },
                        new
                        {
                            Id = 3,
                            ActionParameter = "SendWelcomeEmail",
                            ActionType = "Publish",
                            InitialStateName = "Initially",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95"),
                            TriggerEventName = "SubscriberCreated"
                        },
                        new
                        {
                            Id = 4,
                            ActionParameter = "MarkWelcomeEmailSent",
                            ActionType = "Then",
                            InitialStateName = "Welcoming",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95"),
                            TriggerEventName = "WelcomeEmailSent"
                        },
                        new
                        {
                            Id = 5,
                            ActionParameter = "FollowingUp",
                            ActionType = "TransitionTo",
                            InitialStateName = "Welcoming",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95"),
                            TriggerEventName = "WelcomeEmailSent"
                        },
                        new
                        {
                            Id = 6,
                            ActionParameter = "SendFollowUpEmail",
                            ActionType = "Publish",
                            InitialStateName = "Welcoming",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95"),
                            TriggerEventName = "WelcomeEmailSent"
                        },
                        new
                        {
                            Id = 7,
                            ActionParameter = "MarkFollowUpEmailSentAndComplete",
                            ActionType = "Then",
                            InitialStateName = "FollowingUp",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95"),
                            TriggerEventName = "FollowUpEmailSent"
                        },
                        new
                        {
                            Id = 8,
                            ActionParameter = "Onboarding",
                            ActionType = "TransitionTo",
                            InitialStateName = "FollowingUp",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95"),
                            TriggerEventName = "FollowUpEmailSent"
                        },
                        new
                        {
                            Id = 9,
                            ActionParameter = "PublishOnboardingCompleted",
                            ActionType = "Publish",
                            InitialStateName = "FollowingUp",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95"),
                            TriggerEventName = "FollowUpEmailSent"
                        },
                        new
                        {
                            Id = 10,
                            ActionType = "Finalize",
                            InitialStateName = "FollowingUp",
                            TemplateId = new Guid("e54baee0-f1a6-4e50-9e92-4f65bed95c95"),
                            TriggerEventName = "FollowUpEmailSent"
                        });
                });

            modelBuilder.Entity("StateMachineMapper.Entities.Subscriber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("StateMachineMapper.StateMachine.Data.OnboardingStateMachineData", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentState")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("FollowUpEmailSent")
                        .HasColumnType("boolean");

                    b.Property<bool>("OnboardingCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WelcomeEmailSent")
                        .HasColumnType("boolean");

                    b.HasKey("CorrelationId");

                    b.ToTable("OnboardingStateMachineData");
                });

            modelBuilder.Entity("StateMachineMapper.Entities.StateMachineTemplateConsumer", b =>
                {
                    b.HasOne("StateMachineMapper.Entities.StateMachineTemplate", "Template")
                        .WithMany("Consumers")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("StateMachineMapper.Entities.StateMachineTemplateEntry", b =>
                {
                    b.HasOne("StateMachineMapper.Entities.StateMachineTemplate", "Template")
                        .WithMany("Entries")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("StateMachineMapper.Entities.StateMachineTemplate", b =>
                {
                    b.Navigation("Consumers");

                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
